generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// KullanÄ±cÄ±lar (mÃ¼ÅŸteriler)
model User {
  id                 String              @id @default(uuid())
  name               String
  surname            String?
  email              String              @unique
  phone              String?             @unique
  qrCode             String              @unique
  createdAt          DateTime            @default(now())
  password           String
  verified           Boolean             @default(false) // ðŸ‘ˆ ekledik
  purchases          Purchase[]
  userPoints         UserPoints[]
  pointsUsages       PointsUsage[]
  verificationTokens VerificationToken[] // ðŸ‘ˆ iliÅŸki
}

model Company {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  address   String?
  createdAt DateTime @default(now())

  categories         Category[]
  products           Product[]
  purchases          Purchase[]
  userPoints         UserPoints[]
  pointsUsages       PointsUsage[]
  campaigns          Campaign[]
  verified           Boolean                    @default(false)
  verificationTokens CompanyVerificationToken[]
  // ðŸ‘‡ burasÄ± eksikti
  staff              CompanyStaff[]
}

model CompanyStaff {
  id        String  @id @default(uuid())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  name     String
  email    String  @unique
  password String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())

  purchases    Purchase[]
  pointsUsages PointsUsage[]
}

/// ÃœrÃ¼n kategorileri
model Category {
  id   Int    @id @default(autoincrement())
  name String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  products Product[]
}

/// ÃœrÃ¼nler
model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  cashback  Float    @default(0) // âœ… artÄ±k TL iade alanÄ±
  createdAt DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?

  purchases    Purchase[]
  pointsUsages PointsUsage[] // âœ… tekrar eklendi
}

/// SatÄ±n almalar
model Purchase {
  id             Int      @id @default(autoincrement())
  quantity       Int      @default(1)
  totalPrice     Float
  cashbackEarned Float    @default(0)
  purchaseDate   DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?

  // ðŸ‘‡ personeli izlemek iÃ§in (opsiyonel, bozulma yok)
  createdByStaff   CompanyStaff? @relation(fields: [createdByStaffId], references: [id], onDelete: SetNull)
  createdByStaffId String?
}

/// MÃ¼ÅŸteri puanlarÄ±
model UserPoints {
  id          Int @id @default(autoincrement())
  totalPoints Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([userId, companyId])
}

/// KullanÄ±lan puanlar
model PointsUsage {
  id       Int      @id @default(autoincrement())
  amount   Int
  quantity Int      @default(1)
  price    Float    @default(0)
  usedAt   DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?

  // ðŸ‘‡ personeli izlemek iÃ§in (opsiyonel, bozulma yok)
  createdByStaff   CompanyStaff? @relation(fields: [createdByStaffId], references: [id], onDelete: SetNull)
  createdByStaffId String?
}

model Campaign {
  id        Int      @id @default(autoincrement())
  title     String
  detail    String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

model CompanyVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  expires   DateTime
  createdAt DateTime @default(now())
}
