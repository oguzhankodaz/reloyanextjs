generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  surname             String?
  email               String               @unique
  phone               String?              @unique
  qrCode              String               @unique
  createdAt           DateTime             @default(now())
  password            String
  verified            Boolean              @default(false) // 👈 ekledik
  totalEarnings       Float                @default(0) // 🏆 Rozet sistemi için toplam kazanç
  purchases           Purchase[]
  userPoints          UserPoints[]
  pointsUsages        PointsUsage[]
  verificationTokens  VerificationToken[] // 👈 ilişki
  passwordResetTokens PasswordResetToken[] // Şifre sıfırlama
  consents            UserConsent[] // KVKK rıza kayıtları
  dsarRequests        DsarRequest[] // KVKK veri talepleri
}

model Company {
  id                  String                      @id @default(uuid())
  name                String
  email               String                      @unique
  password            String
  address             String?
  cashbackPercentage  Float                       @default(3) // Varsayılan %3
  createdAt           DateTime                    @default(now())
  categories          Category[]
  products            Product[]
  purchases           Purchase[]
  userPoints          UserPoints[]
  pointsUsages        PointsUsage[]
  campaigns           Campaign[]
  verified            Boolean                     @default(false)
  verificationTokens  CompanyVerificationToken[]
  passwordResetTokens CompanyPasswordResetToken[] // Şifre sıfırlama
  staff               CompanyStaff[]
  consents            CompanyConsent[] // KVKK rıza kayıtları
  subscriptions       CompanySubscription[] // Abonelik kayıtları
}

model CompanyStaff {
  id        String   @id @default(uuid())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  name      String
  email     String   @unique
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  purchases    Purchase[]
  pointsUsages PointsUsage[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  products Product[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?       // Ürün içeriği/açıklaması
  price        Float
  cashback     Float         @default(0) // ✅ artık TL iade alanı
  createdAt    DateTime      @default(now())
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String
  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId   Int?
  purchases    Purchase[]
  pointsUsages PointsUsage[] // ✅ tekrar eklendi
}

/// Satın almalar
model Purchase {
  id             Int      @id @default(autoincrement())
  quantity       Int      @default(1)
  totalPrice     Float
  cashbackEarned Float    @default(0)
  purchaseDate   DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?

  // 👇 personeli izlemek için (opsiyonel, bozulma yok)
  createdByStaff   CompanyStaff? @relation(fields: [createdByStaffId], references: [id], onDelete: SetNull)
  createdByStaffId String?
}

/// Müşteri puanları
model UserPoints {
  id          Int @id @default(autoincrement())
  totalPoints Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([userId, companyId])
}

/// Kullanılan puanlar
model PointsUsage {
  id       Int      @id @default(autoincrement())
  amount   Int
  quantity Int      @default(1)
  price    Float    @default(0)
  usedAt   DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?

  // 👇 personeli izlemek için (opsiyonel, bozulma yok)
  createdByStaff   CompanyStaff? @relation(fields: [createdByStaffId], references: [id], onDelete: SetNull)
  createdByStaffId String?
}

model Campaign {
  id        Int      @id @default(autoincrement())
  title     String
  detail    String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model CompanyPasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  createdAt DateTime @default(now())
}

model CompanyVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  expires   DateTime
  createdAt DateTime @default(now())
}

/// KVKK - Rıza yönetimi (Consent tracking)
model UserConsent {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  consentType String // "marketing", "analytics", "profiling", etc.
  granted     Boolean   @default(false)
  grantedAt   DateTime?
  revokedAt   DateTime?
  ipAddress   String?
  userAgent   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, consentType])
  @@index([userId, consentType])
}

/// KVKK - Veri talebi kayıtları (DSAR - Data Subject Access Requests)
model DsarRequest {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  requestType String // "export", "delete", "rectify"
  status      String  @default("pending") // "pending", "processing", "completed", "rejected"
  details     String? // JSON string with request details
  response    String? // Admin response or processing notes

  requestedAt DateTime  @default(now())
  processedAt DateTime?
  completedAt DateTime?

  ipAddress String?

  @@index([userId, requestType])
  @@index([status])
}

/// KVKK - Şirket rıza yönetimi
model CompanyConsent {
  id        String  @id @default(uuid())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  consentType String // "terms", "privacy", "marketing", etc.
  granted     Boolean   @default(false)
  grantedAt   DateTime?
  revokedAt   DateTime?
  ipAddress   String?
  userAgent   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, consentType])
  @@index([companyId, consentType])
}

/// Audit log için veri değişikliği kayıtları
model AuditLog {
  id         String  @id @default(uuid())
  userId     String? // Nullable - system actions may not have userId
  action     String // "user.update", "user.delete", "consent.grant", etc.
  entityType String // "User", "Purchase", "Consent", etc.
  entityId   String
  changes    String? // JSON string with before/after values
  ipAddress  String?
  userAgent  String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

/// Şirket abonelik kayıtları
model CompanySubscription {
  id        String  @id @default(uuid())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  orderId  String @unique // PayTR merchant_oid
  planType String // "monthly", "6months", "yearly"
  amount   Float // Ödenen tutar (TL)
  status   String @default("active") // "active", "expired", "cancelled"

  // PayTR işlem detayları
  paytrTransactionId String? // PayTR'den gelen işlem ID'si
  paymentDate        DateTime @default(now())
  expiresAt          DateTime // Abonelik bitiş tarihi

  // İzleme
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, status])
  @@index([orderId])
  @@index([expiresAt])
}
