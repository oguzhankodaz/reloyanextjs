generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Kullanıcılar (müşteriler)
model User {
  id        String   @id @default(uuid())
  name      String
  surname   String?
  email     String   @unique
  phone     String?  @unique
  qrCode    String   @unique
  createdAt DateTime @default(now())
  password  String

  purchases    Purchase[]
  userPoints   UserPoints[]
  pointsUsages PointsUsage[]
}

model Company {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  address   String?
  createdAt DateTime @default(now())

  categories   Category[]
  products     Product[]
  purchases    Purchase[]
  userPoints   UserPoints[]
  pointsUsages PointsUsage[]
  campaigns    Campaign[]
}

/// Ürün kategorileri
model Category {
  id   Int    @id @default(autoincrement())
  name String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  products Product[]
}

/// Ürünler
model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  cashback  Float    @default(0) // ✅ artık TL iade alanı
  createdAt DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId Int?

  purchases    Purchase[]
  pointsUsages PointsUsage[] // ✅ tekrar eklendi
}

/// Satın almalar
model Purchase {
  id             Int      @id @default(autoincrement())
  quantity       Int      @default(1)
  totalPrice     Float
  cashbackEarned Float    @default(0) // ✅ artık TL iade
  purchaseDate   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?
}

/// Müşteri puanları
model UserPoints {
  id          Int @id @default(autoincrement())
  totalPoints Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([userId, companyId])
}

/// Kullanılan puanlar
model PointsUsage {
  id       Int      @id @default(autoincrement())
  amount   Int
  quantity Int      @default(1)
  price    Float    @default(0)
  usedAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId Int?
}

model Campaign {
  id        Int      @id @default(autoincrement())
  title     String
  detail    String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
}
