generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  name                String
  surname             String?
  email               String               @unique
  phone               String?              @unique
  qrCode              String               @unique
  createdAt           DateTime             @default(now())
  password            String
  verified            Boolean              @default(false)
  totalEarnings       Float                @default(0)
  dsarRequests        DsarRequest[]
  passwordResetTokens PasswordResetToken[]
  pointsUsages        PointsUsage[]
  purchases           Purchase[]
  consents            UserConsent[]
  userPoints          UserPoints[]
  verificationTokens  VerificationToken[]
}

model Company {
  id                  String                      @id @default(uuid())
  name                String
  address             String?
  createdAt           DateTime                    @default(now())
  email               String                      @unique
  password            String
  verified            Boolean                     @default(false)
  cashbackPercentage  Float                       @default(3)
  campaigns           Campaign[]
  categories          Category[]
  passwordResetTokens CompanyPasswordResetToken[]
  staff               CompanyStaff[]
  verificationTokens  CompanyVerificationToken[]
  pointsUsages        PointsUsage[]
  products            Product[]
  purchases           Purchase[]
  userPoints          UserPoints[]
}

model CompanyStaff {
  id           String        @id @default(uuid())
  companyId    String
  name         String
  email        String        @unique
  password     String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  pointsUsages PointsUsage[]
  purchases    Purchase[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products  Product[]
}

model Product {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  createdAt    DateTime      @default(now())
  companyId    String
  categoryId   Int?
  cashback     Float         @default(0)
  pointsUsages PointsUsage[]
  category     Category?     @relation(fields: [categoryId], references: [id])
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchases    Purchase[]
}

/// Satın almalar
model Purchase {
  id               Int           @id @default(autoincrement())
  quantity         Int           @default(1)
  totalPrice       Float
  purchaseDate     DateTime      @default(now())
  userId           String
  companyId        String
  productId        Int?
  cashbackEarned   Float         @default(0)
  createdByStaffId String?
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByStaff   CompanyStaff? @relation(fields: [createdByStaffId], references: [id])
  product          Product?      @relation(fields: [productId], references: [id])
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Müşteri puanları
model UserPoints {
  id          Int     @id @default(autoincrement())
  totalPoints Int     @default(0)
  userId      String
  companyId   String
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

/// Kullanılan puanlar
model PointsUsage {
  id               Int           @id @default(autoincrement())
  amount           Float
  usedAt           DateTime      @default(now())
  userId           String
  companyId        String
  price            Float         @default(0)
  productId        Int?
  quantity         Int           @default(1)
  createdByStaffId String?
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdByStaff   CompanyStaff? @relation(fields: [createdByStaffId], references: [id])
  product          Product?      @relation(fields: [productId], references: [id])
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id        Int      @id @default(autoincrement())
  title     String
  detail    String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyPasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  companyId String
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model CompanyVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  companyId String
  expires   DateTime
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

/// KVKK - Rıza yönetimi (Consent tracking)
model UserConsent {
  id          String    @id @default(uuid())
  userId      String
  consentType String
  granted     Boolean   @default(false)
  grantedAt   DateTime?
  revokedAt   DateTime?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, consentType])
}

/// KVKK - Veri talebi kayıtları (DSAR - Data Subject Access Requests)
model DsarRequest {
  id          String    @id @default(uuid())
  userId      String
  requestType String
  status      String    @default("pending")
  details     String?
  response    String?
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  completedAt DateTime?
  ipAddress   String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, requestType])
  @@index([status])
}

/// Audit log için veri değişikliği kayıtları
model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  changes    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
}
